{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elity\\\\Documents\\\\BU_Courses\\\\CS673\\\\seprojects-cs673olf24team6\\\\code\\\\frontend\\\\src\\\\components\\\\MovieQueryFormComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport fetchMovieData from '../services/fetchMovieData'; // Import your data-fetching utility function\n\n//This may need to be better refactor into more appropriate function calls so they may be unit tested\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieQueryFormComponent({\n  setData,\n  setLoading\n}) {\n  _s();\n  useEffect(() => {\n    // Fetch the HTML file and insert it into the container\n    fetch('/submitform.html').then(response => response.text()) // Convert response to text (HTML)\n    .then(html => {\n      // Inject the fetched HTML into the div with id 'formContainer'\n      document.getElementById('formContainer').innerHTML = html;\n\n      // Attach event listener to the dynamically loaded form\n      const form = document.getElementById('submitForm');\n      form.addEventListener('submit', handleSubmit);\n    }).catch(err => console.error('Failed to load HTML:', err));\n  }, []);\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent default form submission behavior\n\n    // Get input values from the dynamically loaded form\n    const input1 = document.getElementById('input1').value;\n    const input2 = document.getElementById('input2').value;\n    setLoading(true); // Set loading state to true\n    try {\n      const result = await fetchMovieData(input1, input2); // Fetch data using inputs\n      setData(result.message); // Set the data received from the backend\n    } catch (error) {\n      setData('Error retrieving data');\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n\n  // This return a template html file not an inline html file\n  return (\n    /*#__PURE__*/\n    // Container where the HTML form will be dynamically injected\n    _jsxDEV(\"div\", {\n      id: \"formContainer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(MovieQueryFormComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MovieQueryFormComponent;\nexport default MovieQueryFormComponent;\nvar _c;\n$RefreshReg$(_c, \"MovieQueryFormComponent\");","map":{"version":3,"names":["React","useEffect","fetchMovieData","jsxDEV","_jsxDEV","MovieQueryFormComponent","setData","setLoading","_s","fetch","then","response","text","html","document","getElementById","innerHTML","form","addEventListener","handleSubmit","catch","err","console","error","e","preventDefault","input1","value","input2","result","message","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/elity/Documents/BU_Courses/CS673/seprojects-cs673olf24team6/code/frontend/src/components/MovieQueryFormComponent.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport fetchMovieData from '../services/fetchMovieData';  // Import your data-fetching utility function\r\n\r\n\r\n//This may need to be better refactor into more appropriate function calls so they may be unit tested\r\nfunction MovieQueryFormComponent({ setData, setLoading }) {\r\n    useEffect(() => {\r\n        // Fetch the HTML file and insert it into the container\r\n        fetch('/submitform.html')\r\n            .then(response => response.text())  // Convert response to text (HTML)\r\n            .then(html => {\r\n                // Inject the fetched HTML into the div with id 'formContainer'\r\n                document.getElementById('formContainer').innerHTML = html;\r\n\r\n                // Attach event listener to the dynamically loaded form\r\n                const form = document.getElementById('submitForm');\r\n                form.addEventListener('submit', handleSubmit);\r\n            })\r\n            .catch(err => console.error('Failed to load HTML:', err));\r\n    }, []);\r\n\r\n    // Handle form submission\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();  // Prevent default form submission behavior\r\n\r\n        // Get input values from the dynamically loaded form\r\n        const input1 = document.getElementById('input1').value;\r\n        const input2 = document.getElementById('input2').value;\r\n\r\n        setLoading(true);  // Set loading state to true\r\n        try {\r\n            const result = await fetchMovieData(input1, input2);  // Fetch data using inputs\r\n            setData(result.message);  // Set the data received from the backend\r\n        } catch (error) {\r\n            setData('Error retrieving data');\r\n        } finally {\r\n            setLoading(false);  // Set loading state to false\r\n        }\r\n    };\r\n\r\n    // This return a template html file not an inline html file\r\n    return (\r\n        // Container where the HTML form will be dynamically injected\r\n        <div id=\"formContainer\"></div>\r\n    );\r\n}\r\n\r\nexport default MovieQueryFormComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,cAAc,MAAM,4BAA4B,CAAC,CAAE;;AAG1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,uBAAuBA,CAAC;EAAEC,OAAO;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACtDP,SAAS,CAAC,MAAM;IACZ;IACAQ,KAAK,CAAC,kBAAkB,CAAC,CACpBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAE;IAAA,CACnCF,IAAI,CAACG,IAAI,IAAI;MACV;MACAC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACC,SAAS,GAAGH,IAAI;;MAEzD;MACA,MAAMI,IAAI,GAAGH,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MAClDE,IAAI,CAACC,gBAAgB,CAAC,QAAQ,EAAEC,YAAY,CAAC;IACjD,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMF,YAAY,GAAG,MAAOK,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAE;;IAErB;IACA,MAAMC,MAAM,GAAGZ,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACY,KAAK;IACtD,MAAMC,MAAM,GAAGd,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC,CAACY,KAAK;IAEtDpB,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE;IACnB,IAAI;MACA,MAAMsB,MAAM,GAAG,MAAM3B,cAAc,CAACwB,MAAM,EAAEE,MAAM,CAAC,CAAC,CAAE;MACtDtB,OAAO,CAACuB,MAAM,CAACC,OAAO,CAAC,CAAC,CAAE;IAC9B,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZjB,OAAO,CAAC,uBAAuB,CAAC;IACpC,CAAC,SAAS;MACNC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;IACxB;EACJ,CAAC;;EAED;EACA;IAAA;IACI;IACAH,OAAA;MAAK2B,EAAE,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;AAEtC;AAAC3B,EAAA,CAxCQH,uBAAuB;AAAA+B,EAAA,GAAvB/B,uBAAuB;AA0ChC,eAAeA,uBAAuB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
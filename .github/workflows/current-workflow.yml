name: Microservices Workflow
run-name: ${{ github.actor }} is testing microservices workflow.
on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BACKEND_IMAGE_NAME: flask_backend
  FRONTEND_IMAGE_NAME: node_frontend
  DATABASE_IMAGE_NAME: sqlite_database
  REPO_NAME: "bumetcs673/seprojects-cs673olf24team6"

jobs:
  AWS-Deployement:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Generate deployment package
        run: |
          cd ./code/
          zip -r topmoviesapi.zip docker-compose.yml
          mv topmoviesapi.zip ../
  
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: TopMoviesAPI
          environment_name: TopMoviesAPI-Environment
          version_label: 1
          region: us-east-1
          deployment_package: topmoviesapi.zip

  Get-Branch-Name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_branch_name: ${{ steps.sanitize.outputs.sanitized }}
    steps:
      - name: Sanitize branch name
        id: sanitize
        run: |
          sanitized=$(echo '${{ github.ref_name }}' | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "sanitized=$sanitized" >> $GITHUB_OUTPUT  # Save it as job output
  
  Docker-and-Python-Flask-Service:
    runs-on: ubuntu-latest
    needs: Get-Branch-Name
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt

      - name: Build the Docker Production Image
        run: |
          cd ./code/backend
          docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} .

      - name: Push Production Docker Image
        run: docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
        
      - name: Start a new container
        run: docker run --name ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} -d ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Check files in container
        run: |
            docker exec ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} ls /app
      - name: List containers
        run: docker ps -a

      - name: Inspect ${{ env.BACKEND_IMAGE_NAME }}
        run: docker inspect ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Stop container
        run: docker stop ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Restart container
        run: docker restart ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Show container status
        run: docker ps -a

      - name: Stop container again
        run: docker stop ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Remove container
        run: docker rm ${{ env.BACKEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - run: echo "Docker-and-Python-Flask-Service job's status is ${{ job.status }}."

  Run-Backend-Unit-Tests:
    name: Running backend unit tests
    needs: [ Get-Branch-Name, Docker-and-Python-Flask-Service ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/flask_backend:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
      credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Run Unit Tests
        working-directory: /app/tests
        run: pytest process_query_request_test.py

  Run-Backend-PyLint:
    name: PyLint backend test
    runs-on: ubuntu-latest
    needs: [ Get-Branch-Name, Run-Backend-Unit-Tests ]

    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/flask_backend:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Run pylint/pass or fail
      run: pylint ./ --fail-under=5

  Publish-Flask-Image-to-GitHub-Package-Registry:
    name: Publish Docker Python Flask Image to GitHub Package Registry
    needs: [ Get-Branch-Name, Run-Backend-Unit-Tests, Run-Backend-PyLint ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: |
          cd ./code/backend
          pip install -r requirements.txt

      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.BACKEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - run: echo "Publish-Flask-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."

  Docker-and-Database-Service:
    runs-on: ubuntu-latest
    needs: Get-Branch-Name
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install required dependencies
        run: |
          cd ./code/database
          pip install -r requirements.txt

      - name: Build the Docker Production Image
        run: |
          cd ./code/database
          docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} .

      - name: Push Production Docker Image
        run: docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Build the Docker Test Image
        run: |
            cd ./code/database
            docker build -f Dockerfile.test -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} .

      - name: Start Test container
        run: docker run --name ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} -d ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Check files in container
        run: |
          docker exec ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} ls /database
      - name: List containers
        run: docker ps -a

      - name: Stop container
        run: docker stop ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Restart container
        run: docker restart ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Show container status
        run: docker ps -a

      - name: Stop container again
        run: docker stop ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Remove container
        run: docker rm ${{ env.DATABASE_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Push Test Docker Image
        run: docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - run: echo "Docker-and-Sqlite-database-Service job's status is ${{ job.status }}."

  Run-Database-Unit-Tests:
    name: Running database unit tests
    needs: [ Get-Branch-Name, Docker-and-Database-Service ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/sqlite_database:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Run test
        working-directory: /database/tests
        run: pytest movies_unit_test.py

  Run-PyLint-Database:
    name: PyLint database test 
    needs: [Get-Branch-Name, Run-Database-Unit-Tests]
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/sqlite_database:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Run pylint/pass or fail
        run: pylint ./ --fail-under=5

  Publish-Database-Image-to-GitHub-Package-Registry:
    name: Publish Docker Database Image to GitHub Package Registry
    needs: [ Get-Branch-Name, Run-Database-Unit-Tests, Run-PyLint-Database ]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: |
          cd ./code/database
          pip install -r requirements.txt

      - name: Login to GitHub Packages registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag data for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/database
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.DATABASE_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - run: echo "Publish-Flask-Image-to-GitHub-Package-Registry job's status is ${{ job.status }}."

  Docker-and-Node-Service:
    runs-on: ubuntu-latest
    needs: Get-Branch-Name
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checking out repository code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci

      - name: Build the Docker Image
        working-directory: ./code/frontend
        run: docker build -t ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} .

      - name: Push Production Docker Image
        run: docker push ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Start a new container
        run: docker run --name ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} -d ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Check files in container
        run: |
          docker exec ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }} ls /app

      - name: Verify Container Running
        run: docker ps -a

      - name: Stop container
        run: docker stop ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - name: Remove container
        run: docker rm ${{ env.FRONTEND_IMAGE_NAME }}-${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}

      - run: echo "Docker-and-Node-Service job's status is ${{ job.status }}."

  Run-Frontend-Unit-Tests:
    name: Running frontend unit tests
    needs: [ Get-Branch-Name, Docker-and-Node-Service ]
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/bumetcs673/seprojects-cs673olf24team6/node_frontend:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
      credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Run Unit Tests
        working-directory: /app
        run: npm test

  Publish-Node-Image-to-GitHub-Package-Registry:
    name: Publish Docker Node Image to GitHub Package Registry
    needs: [Get-Branch-Name, Run-Frontend-Unit-Tests]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.8.0'
      - name: Install npm
        working-directory: ./code/frontend
        run: npm ci
      - name: Install npm react-scripts
        run: npm install react-scripts --save

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the Docker Image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./code/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ needs.Get-Branch-Name.outputs.sanitized_branch_name }}
